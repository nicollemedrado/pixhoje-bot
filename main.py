import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes

TOKEN = "7586448163:AAE3tvRZWR3YKE3yavYpleM5gntWx2T6xVE"

logging.basicConfig(level=logging.INFO)

# Roteiro motivacional baseado em gatilhos emocionais
respostas = {
    "motivo_start": {
        "text": "Voc√™ j√° pensou em desistir de tudo, mas mesmo assim continua tentando?\nIsso j√° te torna mais forte do que imagina.\nQuer ver onde essa for√ßa pode te levar?",
        "buttons": [("Sim, me mostra", "motivo_mostra"), ("Tenho medo de me decepcionar de novo", "motivo_medo")]
    },
    "motivo_mostra": {
        "text": "O PixHoje √© mais do que um m√©todo. √â um lembrete de que voc√™ ainda tem controle.\nVoc√™ vai aprender como transformar R$29 em liberdade usando s√≥ seu celular.",
        "buttons": [("Mas e se n√£o funcionar?", "motivo_duvida"), ("Quero entrar", "motivo_quero")]
    },
    "motivo_medo": {
        "text": "O medo √© s√≥ um sinal de que voc√™ t√° saindo da zona de conforto.\nA zona onde nada muda.\nSe voc√™ chegou at√© aqui, n√£o √© por acaso.",
        "buttons": [("O que √© esse m√©todo?", "motivo_mostra"), ("Quero arriscar", "motivo_quero")]
    },
    "motivo_duvida": {
        "text": "Nada na vida √© garantia. Mas aqui voc√™ tem 7 dias pra testar.\nE se n√£o gostar, seu dinheiro volta. Simples assim.",
        "buttons": [("Ok, quero tentar", "motivo_quero"), ("Isso faz sentido", "motivo_mostra")]
    },
    "motivo_quero": {
        "text": "Se voc√™ sentiu algo lendo isso, siga seu instinto.\nüëâ https://bit.ly/pixhojevip\nA mudan√ßa come√ßa quando a coragem fala mais alto. üí•",
        "buttons": []
    }
}

# In√≠cio do fluxo motivacional com /motivar
async def motivacional(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = respostas["motivo_start"]
    keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in data["buttons"]]
    await update.message.reply_text(data["text"], reply_markup=InlineKeyboardMarkup(keyboard))

# Controle da navega√ß√£o por bot√µes
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data
    data = respostas.get(key, respostas["motivo_start"])
    keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in data["buttons"]]
    await query.message.reply_text(data["text"], reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None)

# Configura√ß√£o do bot
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("motivar", motivacional))
app.add_handler(CallbackQueryHandler(button))

if __name__ == "__main__":
    app.run_polling()
